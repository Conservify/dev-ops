@Library('conservify') _

def createDirectory(path) {
    def actual = ""
    dir (path) {
        sh "pwd"
        actual = pwd()
    }
    return actual
}

timestamps {
    // Cross compile golang tools because this is generally faster.
    node ("master") {
        def go = tool "golang-amd64"
        def build = createDirectory("build")
        def pkg = createDirectory("package")

        dir ("gowork") {
            def gowork = pwd()

            dir ("src") {
                withEnv(["PATH+GOLANG=/bin:/usr/local/bin:/usr/bin:${go}/bin", "GOARCH=arm", "GOOS=linux", "GOROOT=${go}", "GOPATH=${gowork}"]) {
                    stage ("simple-deps") {
                        dir ("github.com/Conservify/simple-deps") {
                            git branch: 'master', url: 'https://github.com/Conservify/simple-deps.git'

                            sh "make deps && make"
                            sh "cp build/* ${pkg}"
                        }
                    }
                    stage ("flasher") {
                        dir ("github.com/Conservify/flasher") {
                            git branch: 'master', url: 'https://github.com/Conservify/flasher.git'

                            sh "make deps && make"
                            sh "cp build/linux-arm/* ${pkg}"
                            sh "cp -ar tools ${pkg}"
                        }
                    }
                    stage ("fktool") {
                        dir ("github.com/fieldkit/cloud") {
                            git branch: 'master', url: 'https://github.com/fieldkit/cloud.git'

                            sh "make deps && make build/fktool"
                            sh "cp build/fktool ${pkg}"
                        }
                    }

                    stage ("archive") {
                        dir (pkg) {
                            stash name: "tools", includes: "**"
                            archiveArtifacts artifacts: '**'
                        }
                    }
                }
            }
        }
        deleteDir()
    }

    node ("arm") {
        def go = tool "golang-arm"
        sh "${go}/bin/go version"

        stage ('test') {
            unstash 'tools'
        }
    }
}
